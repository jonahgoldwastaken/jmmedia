# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""The Project Content block model"""
type Content {
  _id: ID!
  data: String!
  type: ContentTypes!
}

input ContentInput {
  data: String!
  type: ContentTypes!
}

"""The different available content types"""
enum ContentTypes {
  film
  heading
  image
  paragraph
  row
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

type Mutation {
  createProject(project: ProjectInput!): Project!
  createService(service: ServiceInput!): Service!

  """Deletes files at specified URL"""
  deleteImage(url: String!): Boolean!
  deleteProject(id: String!): Boolean!
  deleteService(id: String!): Boolean!
  loginUser(user: UserInput!): String
  registerUser(user: UserInput!): User

  """Submit a contact form"""
  submitRequest(request: ServiceRequestInput!): String!
  updateProject(id: String!, project: ProjectInput!): Project!
  updateService(id: String!, service: ServiceInput!): Service!

  """Upload a single file"""
  uploadImage(file: Upload!): [String!]!

  """Upload a listImage"""
  uploadListImage(file: Upload!): String!
}

"""The Project model"""
type Project {
  _id: ID!
  callToAction: String!
  content: [Content!]!
  deleted: Boolean!
  listImage: String!
  service: Service!
  slug: String!
  title: String!
}

input ProjectInput {
  callToAction: String!
  content: [ContentInput!]!
  listImage: String!
  service: String!
  slug: String!
  title: String!
}

type Query {
  currentUser: User

  """Returns one project based on provided slug or id"""
  project(slug: String!): Project

  """Returns all projects, with possible filtering by service"""
  projects(
    """Include deleted projects"""
    includeDeleted: Boolean

    """ObjectID of service to filter on"""
    service: String
  ): [Project!]!

  """Returns one service based on provided slug"""
  service(slug: String!): Service

  """Returns all services"""
  services: [Service!]!
}

"""The Service model"""
type Service {
  _id: ID!
  additionalOptions: [String!]!
  baseOptions: [String!]!
  callToAction: String!
  description: [String!]!
  listImage: String!
  name: String!
  slug: String!
}

input ServiceInput {
  additionalOptions: [String!]!
  baseOptions: [String!]!
  callToAction: String!
  description: [String!]!
  listImage: String!
  name: String!
  slug: String!
}

"""The Service Request Model"""
input ServiceRequestInput {
  email: EmailAddress!
  message: String!
  service: String!
  subject: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""The User model"""
type User {
  _id: ID!
  username: String!
}

input UserInput {
  password: String!
  username: String!
}
